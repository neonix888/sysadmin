#!/usr/bin/env bash
# ========================================================================
# Fail2ban One-Stop Installer for Ubuntu (20.04/22.04/24.04)
# - Installs fail2ban
# - Creates /etc/fail2ban/jail.local with sane defaults
# - Auto-detects SSH port(s) and whitelists your current SSH client IP
# - Chooses nftables (preferred) or iptables automatically
# - Enables + starts service; provides a helper CLI: /usr/local/bin/f2b
#
# Usage:
#   sudo bash fail2ban-setup.sh                 # install/configure/start
#   sudo bash fail2ban-setup.sh --status        # show service + jail status
#   sudo bash fail2ban-setup.sh --banlist       # show banned IPs (sshd)
#   sudo bash fail2ban-setup.sh --unban 1.2.3.4 # unban an IP from sshd
#   sudo bash fail2ban-setup.sh --uninstall     # remove fail2ban + config
#
# Optional env overrides before running:
#   F2B_BANTIME="12h" F2B_FINDTIME="10m" F2B_MAXRETRY=5 sudo -E bash fail2ban-setup.sh
# Maintainer: Hieu Nguyen hieu@pobox.com
# ========================================================================

set -Eeuo pipefail

# -------- Pretty output ---------------------------------------------------
clr() { tput setaf "$1" 2>/dev/null || true; }
rst() { tput sgr0 2>/dev/null || true; }
ok()  { echo "$(clr 2)[OK]$(rst) $*"; }
inf() { echo "$(clr 6)[INFO]$(rst) $*"; }
wrn() { echo "$(clr 3)[WARN]$(rst) $*"; }
err() { echo "$(clr 1)[ERROR]$(rst) $*" >&2; }

require_root() {
  if [[ ${EUID:-$(id -u)} -ne 0 ]]; then
    err "Please run as root: sudo bash $0"
    exit 1
  fi
}

# -------- Parse args ------------------------------------------------------
ACTION="install"
UNBAN_IP=""
if [[ $# -gt 0 ]]; then
  case "${1:-}" in
    --status)    ACTION="status" ;;
    --banlist)   ACTION="banlist" ;;
    --unban)     ACTION="unban"; UNBAN_IP="${2:-}"; [[ -z "$UNBAN_IP" ]] && { err "Usage: $0 --unban <IP>"; exit 2; } ;;
    --uninstall) ACTION="uninstall" ;;
    *)           err "Unknown argument: $1"; exit 2 ;;
  esac
fi

# -------- Helpers ---------------------------------------------------------
detect_ssh_ports() {
  # Returns comma-separated list of SSH ports (falls back to 22)
  local ports
  ports=$(awk '/^[[:space:]]*Port[[:space:]]+[0-9]+/ {print $2}' /etc/ssh/sshd_config 2>/dev/null || true)
  # Include drop-in *.conf files if present
  if compgen -G "/etc/ssh/sshd_config.d/*.conf" >/dev/null; then
    ports+=$'\n'$(awk '/^[[:space:]]*Port[[:space:]]+[0-9]+/ {print $2}' /etc/ssh/sshd_config.d/*.conf 2>/dev/null || true)
  fi
  ports=$(echo "$ports" | awk 'NF' | sort -n | uniq | paste -sd, -)
  [[ -z "$ports" ]] && ports="22"
  echo "$ports"
}

detect_client_ip() {
  # Best effort: use $SSH_CONNECTION or $SSH_CLIENT; fall back to empty
  if [[ -n "${SSH_CONNECTION:-}" ]]; then
    echo "$SSH_CONNECTION" | awk '{print $1}'
  elif [[ -n "${SSH_CLIENT:-}" ]]; then
    echo "$SSH_CLIENT" | awk '{print $1}'
  else
    echo ""
  fi
}

detect_banaction() {
  if command -v nft >/dev/null 2>&1; then
    echo "nftables nftables-allports"
  else
    # iptables (nft-compat is okay; fail2ban picks iptables-* actions)
    echo "iptables-multiport iptables-allports"
  fi
}

backup_if_exists() {
  local path="$1"
  if [[ -f "$path" ]]; then
    local ts
    ts=$(date +%Y%m%d-%H%M%S)
    cp -a "$path" "${path}.backup-${ts}"
    inf "Backed up ${path} -> ${path}.backup-${ts}"
  fi
}

install_fail2ban() {
  inf "Updating APT indexes..."
  apt-get update -y

  inf "Installing fail2ban..."
  DEBIAN_FRONTEND=noninteractive apt-get install -y fail2ban

  ok "Fail2ban installed."
}

write_jail_local() {
  local ssh_ports="$1"
  local ignore_ip="$2"
  local banners
  IFS=' ' read -r BANACTION BANACTION_ALL <<<"$(detect_banaction)"

  local bantime="${F2B_BANTIME:-12h}"
  local findtime="${F2B_FINDTIME:-10m}"
  local maxretry="${F2B_MAXRETRY:-5}"

  local jail_file="/etc/fail2ban/jail.local"
  backup_if_exists "$jail_file"

  cat > "$jail_file" <<EOF
# -------------------------------------------------------------------------
# Generated by fail2ban-setup.sh on $(date -Is)
# Baseline: protect SSH; sane default timings; auto backend; safe ignore IP.
# -------------------------------------------------------------------------

[DEFAULT]
# Don't ban localhost & your current SSH client (if detected)
ignoreip = 127.0.0.1/8 ::1${ignore_ip:+ }${ignore_ip}

# How many failures in how long triggers a ban; how long the ban lasts:
findtime = ${findtime}
maxretry = ${maxretry}
bantime  = ${bantime}

# Progressive bans for repeat offenders:
bantime.increment = true
bantime.factor    = 1.5
bantime.rndtime   = 10m

# Use systemd journal (modern Ubuntu) and correct firewall backend:
backend  = systemd
banaction = ${BANACTION}
banaction_allports = ${BANACTION_ALL}

# Notifications (disabled by default to avoid configuring mail):
# destemail = root@localhost
# action = %(action_mw)s

# -------------------------------------------------------------------------
# SSH jail
# -------------------------------------------------------------------------
[sshd]
enabled = true
port    = ${ssh_ports}
filter  = sshd
# With backend=systemd, fail2ban reads journal; logpath is optional.
# logpath = %(sshd_log)s
EOF

  ok "Wrote $jail_file"
}

enable_and_start() {
  systemctl enable --now fail2ban
  sleep 1
  systemctl is-active --quiet fail2ban && ok "Fail2ban service is active." || { err "Fail2ban failed to start"; journalctl -u fail2ban --no-pager -n 50; exit 3; }
  fail2ban-client ping >/dev/null 2>&1 && ok "fail2ban-client responding." || { err "fail2ban-client not responding"; exit 3; }
}

write_helper_cli() {
  local helper="/usr/local/bin/f2b"
  cat > "$helper" <<'EOF'
#!/usr/bin/env bash
set -euo pipefail

usage() {
  cat <<USAGE
f2b - Fail2ban quick helper

Usage:
  f2b status              # service + jail summary
  f2b jail <name>         # show status for a jail (e.g., sshd)
  f2b banlist             # list banned IPs for sshd
  f2b unban <IP>          # unban IP from sshd
  f2b logs                # tail fail2ban logs
USAGE
}

cmd="${1:-status}"
case "$cmd" in
  status)
    systemctl --no-pager --full status fail2ban | sed -n '1,20p' || true
    echo
    fail2ban-client status || true
    ;;
  jail)
    [[ -z "${2:-}" ]] && { echo "Usage: f2b jail <name>"; exit 2; }
    fail2ban-client status "$2" || true
    ;;
  banlist)
    fail2ban-client status sshd 2>/dev/null | sed -n '/Banned IP list/,$p' || true
    ;;
  unban)
    [[ -z "${2:-}" ]] && { echo "Usage: f2b unban <IP>"; exit 2; }
    fail2ban-client set sshd unbanip "$2"
    ;;
  logs)
    journalctl -u fail2ban -f
    ;;
  *)
    usage; exit 2;;
esac
EOF
  chmod +x "$helper"
  ok "Helper CLI installed: $helper"
}

show_status() {
  systemctl --no-pager --full status fail2ban | sed -n '1,20p' || true
  echo
  fail2ban-client status || true
  echo
  fail2ban-client status sshd || true
}

do_uninstall() {
  wrn "This will remove fail2ban and its configuration."
  systemctl disable --now fail2ban || true
  apt-get purge -y fail2ban || true
  rm -f /usr/local/bin/f2b || true
  wrn "Configs in /etc/fail2ban/ are left in place (for safety). Remove manually if desired."
  ok "Fail2ban uninstalled."
}

do_banlist() {
  fail2ban-client status sshd 2>/dev/null | sed -n '/Banned IP list/,$p' || { err "Could not read sshd jail status"; exit 4; }
}

do_unban() {
  local ip="$1"
  fail2ban-client set sshd unbanip "$ip"
  ok "Requested unban for: $ip"
}

# -------- Main ------------------------------------------------------------
require_root

case "$ACTION" in
  install)
    inf "Starting Fail2ban setup..."
    install_fail2ban
    SSH_PORTS="$(detect_ssh_ports)"
    CLIENT_IP="$(detect_client_ip)"
    [[ -n "$CLIENT_IP" ]] && ok "Detected SSH client IP: $CLIENT_IP" || wrn "Could not detect SSH client IP (not an SSH session?)."
    write_jail_local "$SSH_PORTS" "$CLIENT_IP"
    enable_and_start
    write_helper_cli
    echo
    ok "Installation complete."
    echo "Next steps:"
    echo "  - Check status:       f2b status"
    echo "  - See sshd jail:      f2b jail sshd"
    echo "  - Watch logs:         f2b logs"
    echo "  - Unban an IP:        f2b unban 1.2.3.4"
    ;;
  status)
    show_status
    ;;
  banlist)
    do_banlist
    ;;
  unban)
    do_unban "$UNBAN_IP"
    ;;
  uninstall)
    do_uninstall
    ;;
esac
